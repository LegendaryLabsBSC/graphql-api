# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChildContracts {
  legendsNFT: String!
  legendToken: String!
  legendRejuvenation: String!
  legendsMarketplace: String!
  legendsMatchingBoard: String!
}

type PromoEvent {
  promoName: String!
  promoId: Int!
  startTime: String!
  expireTime: String!
  isUnrestricted: Boolean!
  isTicketLimit: Boolean!
  isPromoClosed: Boolean!
  ticketsClaimed: Int!
  ticketsRedeemed: Int!
  lengthInDays: Float!
  maxTicketsDispensable: Int
  legendsSkipIncubation: Boolean!
}

type PromoCounts {
  totalPromos: Int!
  promosClosed: Int!
}

type RedeemablePromoTickets {
  promoName: String!
  promoId: Int!
  ticketCount: Int!
  promoClaimed: Boolean!
}

type AccessControlRoles {
  DEFAULT_ADMIN_ROLE: String!
  LAB_ADMIN: String!
  LAB_TECH: String!
}

type AccessControlUsers {
  roleMembers: [String!]!
  roleAdmin: String!
}

type LegendMatching {
  matchingId: String!
  createdAt: String!
  nftContract: String!
  surrogate: String!
  surrogateLegend: String!
  blender: String!
  blenderLegend: String!
  childId: String!
  price: String!
  status: String
}

type TokensPending {
  amount: String!
}

type MatchingCounts {
  matchingIds: Int!
  matchingsClosed: Int!
  matchingsCancelled: Int!
}

type MarketplaceRules {
  royaltyFee: String!
  marketPlaceFee: String!
  offerDuration: String!
  auctionExtension: String!
  auctionDurations: [String!]!
}

type LegendMetadata {
  id: Int!
  season: String!
  prefix: String!
  postfix: String!
  parent1: Int!
  parent2: Int!
  birthday: String!
  blendingInstancesUsed: Int!
  totalOffspring: Int!
  legendCreator: String!
  isLegendary: Boolean!
  isHatched: Boolean!
  isDestroyed: Boolean!
}

type LegendURI {
  id: Int!
  image: String!
  payload: String
}

type LegendNFT {
  id: Int!
  image: String!
  season: String!
  prefix: String!
  postfix: String!
  parent1: Int!
  parent2: Int!
  birthday: String!
  blendingInstancesUsed: Int!
  totalOffspring: Int!
  legendCreator: String!
  isLegendary: Boolean!
  isHatched: Boolean!
  isDestroyed: Boolean!
  ownerOf: String!
}

type AuctionDetails {
  duration: String
  startingPrice: String
  highestBid: String
  highestBidder: String
  isInstantBuy: Boolean
  durationInDays: Int
  instantBuyPrice: String
  bidders: [String!]
  isExpired: Boolean
}

type OfferDetails {
  expirationTime: String
  legendOwner: String
  isAccepted: Boolean
}

type LegendListing {
  listingId: Int!
  createdAt: String!
  nftContract: String!
  legendId: Int!
  legendDetails: LegendNFT!
  seller: String!
  buyer: String!
  price: String!
  isAuction: Boolean!
  isOffer: Boolean!
  status: String
  auctionDetails: AuctionDetails!
  offerDetails: OfferDetails!
}

type PageData {
  count: Float!
  limit: Float!
  offset: Float!
}

type LegendNFTResponse {
  page: LegendNFTConnection!
  pageData: PageData
}

type LegendNFTConnection {
  edges: [LegendNFTEdge!]
  pageInfo: LegendNFTPageInfo
}

type LegendNFTEdge {
  cursor: String
  node: LegendNFT
}

type LegendNFTPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type OwnerOfLegend {
  address: String!
}

type PaymentsPending {
  listingPayments: String!
  royaltiesAccrued: String!
}

type ListingCounts {
  listingIds: Int!
  listingsClosed: Int!
  listingsCancelled: Int!
}

type RejuvenationRules {
  minimumSecure: String!
  maxMultiplier: String!
  reJuPerBlock: String!
  reJuNeededPerSlot: String!
}

type PodDetails {
  nftContract: String!
  depositedBy: String!
  checkpointBlock: String!
  blendingInstancesUsed: String!
  tokenAmountSecured: String!
  multiplier: String!
  rolloverReju: String!
  occupied: String!
}

type RejuvenationProgress {
  earnedReJu: String!
  maxEarnableReju: String!
}

type BalanceOf {
  balance: String!
}

type TokenDetails {
  name: String!
  symbol: String!
  totalSupply: String!
}

type BlendingRules {
  kinBlendingLevel: String!
  blendingLimit: Int!
  baseBlendingCost: Int!
  incubationPeriod: Int!
}

type IncubationViews {
  view1: String!
  view2: String!
  view3: String!
  view4: String!
  view5: String!
}

type IsHatchable {
  hatchable: Boolean!
  unableReason: String
}

type IsBlendable {
  blendable: Boolean!
  unableReason: String
}

type IsListable {
  listable: Boolean!
  unableReason: String
}

type BlendingSlotsUsed {
  blendingSlotsUsed: Int!
  maxBlendingSlots: Int!
  figure: String!
}

type BlendingCost {
  cost: Int!
  ezCost: String!
}

type TotalNFTSupply {
  total: Int!
}

type LegendOffspring {
  offspringIds: [Int!]!
}

type NFTBalanceOf {
  balance: Int!
}

type PinataResponse {
  IpfsHash: String!
  PinSize: Int!
  Timestamp: String!
  isDuplicate: Boolean
}

type Query {
  getHello: String!
  childContracts: ChildContracts!
  promoEvent(id: String!): PromoEvent!
  allPromoEvents(filter: String!): [PromoEvent!]!
  promoCounts: PromoCounts!
  redeemablePromoTickets(address: String!, id: String!): RedeemablePromoTickets!
  allPromoTicketsByUser(address: String!): [RedeemablePromoTickets!]!
  accessControlRoles: AccessControlRoles!
  accessControlUsers(role: String!): AccessControlUsers!
  blendingRules: BlendingRules!
  legendMetadata(id: String!): LegendMetadata!
  legendURI(id: String!): LegendURI!
  legendNFT(id: String!): LegendNFT!
  allLegendNFTs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): LegendNFTResponse!
  allLegendNFTs1(filter: String!): [LegendNFT!]!
  legendNFTsByOwner(address: String!): [LegendNFT!]!
  ownerOfLegend(id: String!): OwnerOfLegend!
  incubationViews: IncubationViews!
  isHatchable(id: String!): IsHatchable!
  isBlendable(id: String!): IsBlendable!
  isListable(address: String!, id: String!): IsListable!
  blendingSlotsUsed(id: String!): BlendingSlotsUsed!
  blendingCost(p2: String, p1: String!): BlendingCost!
  totalNFTSupply: TotalNFTSupply!
  legendOffspring(id: String!): LegendOffspring!
  NFTbalanceOf(address: String!): NFTBalanceOf!
  LGNDbalanceOf(address: String!): BalanceOf!
  tokenDetails: TokenDetails!
  rejuvenationRules: RejuvenationRules!
  podDetails(id: String!): PodDetails!
  rejuvenationProgress(id: String!): RejuvenationProgress!
  marketplaceRules: MarketplaceRules!
  legendListing(id: String!): LegendListing!
  allLegendListings(limit: Float, offset: Float, status: String, filter: String!): [LegendListing!]!
  auctionDetails(id: String!): AuctionDetails!
  offerDetails(id: String!): OfferDetails!
  paymentsPending(address: String!): PaymentsPending!
  listingCounts: ListingCounts!
  legendMatching(id: String!): LegendMatching!
  tokensPending: TokensPending!
  matchingCounts: MatchingCounts!
}

type Mutation {
  pinJSONtoIPFS(pinataReq: PinataRequest!): PinataResponse!
}

input PinataRequest {
  pinName: String!
  pinContent: String!
}
